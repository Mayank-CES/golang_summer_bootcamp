// Code generated by MockGen. DO NOT EDIT.
// Source: Repository/repository.go

// Package repomock is a generated GoMock package.
package repomock

import (
	Models "eCommerce/Models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockRepo) AddProduct(product *Models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepoMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepo)(nil).AddProduct), product)
}

// AddTransaction mocks base method.
func (m *MockRepo) AddTransaction(transaction *Models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockRepoMockRecorder) AddTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockRepo)(nil).AddTransaction), transaction)
}

// BuyProduct mocks base method.
func (m *MockRepo) BuyProduct(product *Models.Product, transaction *Models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyProduct", product, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyProduct indicates an expected call of BuyProduct.
func (mr *MockRepoMockRecorder) BuyProduct(product, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProduct", reflect.TypeOf((*MockRepo)(nil).BuyProduct), product, transaction)
}

// BuyProduct2 mocks base method.
func (m *MockRepo) BuyProduct2(transaction *Models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyProduct2", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyProduct2 indicates an expected call of BuyProduct2.
func (mr *MockRepoMockRecorder) BuyProduct2(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProduct2", reflect.TypeOf((*MockRepo)(nil).BuyProduct2), transaction)
}

// CheckOrderByID mocks base method.
func (m *MockRepo) CheckOrderByID(transaction *Models.Transaction, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderByID", transaction, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOrderByID indicates an expected call of CheckOrderByID.
func (mr *MockRepoMockRecorder) CheckOrderByID(transaction, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderByID", reflect.TypeOf((*MockRepo)(nil).CheckOrderByID), transaction, id)
}

// CreateCustomerAccount mocks base method.
func (m *MockRepo) CreateCustomerAccount(customer *Models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerAccount", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomerAccount indicates an expected call of CreateCustomerAccount.
func (mr *MockRepoMockRecorder) CreateCustomerAccount(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerAccount", reflect.TypeOf((*MockRepo)(nil).CreateCustomerAccount), customer)
}

// CreateRetailerAccount mocks base method.
func (m *MockRepo) CreateRetailerAccount(retailer *Models.Retailer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetailerAccount", retailer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRetailerAccount indicates an expected call of CreateRetailerAccount.
func (mr *MockRepoMockRecorder) CreateRetailerAccount(retailer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetailerAccount", reflect.TypeOf((*MockRepo)(nil).CreateRetailerAccount), retailer)
}

// GetAllProducts mocks base method.
func (m *MockRepo) GetAllProducts(products *[]Models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", products)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockRepoMockRecorder) GetAllProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockRepo)(nil).GetAllProducts), products)
}

// GetProductByID mocks base method.
func (m *MockRepo) GetProductByID(product *Models.Product, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", product, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockRepoMockRecorder) GetProductByID(product, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockRepo)(nil).GetProductByID), product, id)
}

// GetRHistoryByID mocks base method.
func (m *MockRepo) GetRHistoryByID(order *Models.Transaction, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRHistoryByID", order, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRHistoryByID indicates an expected call of GetRHistoryByID.
func (mr *MockRepoMockRecorder) GetRHistoryByID(order, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRHistoryByID", reflect.TypeOf((*MockRepo)(nil).GetRHistoryByID), order, id)
}

// PatchProduct mocks base method.
func (m *MockRepo) PatchProduct(updatedProduct *Models.PatchProd, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchProduct", updatedProduct, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProduct indicates an expected call of PatchProduct.
func (mr *MockRepoMockRecorder) PatchProduct(updatedProduct, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProduct", reflect.TypeOf((*MockRepo)(nil).PatchProduct), updatedProduct, id)
}
